// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4rh5SW6oZGyqfbWexM1sW2
// Component: xnVw57sLDKdN
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantswMeerEGaP87U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wMeerEGaP87U/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 4rh5SW6oZGyqfbWexM1sW2/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: xnVw57sLDKdN/css
import HamburgerIcon from "./icons/PlasmicIcon__Hamburger"; // plasmic-import: FEFIfPDaPK9V/icon
import Group1Icon from "./icons/PlasmicIcon__Group1"; // plasmic-import: IKwXhsTdftZz/icon
import frame7PozZk2ApevC from "./images/frame7.svg"; // plasmic-import: -pozZK2apevC/picture

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswMeerEGaP87U()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"locofyFrame"}
            data-plasmic-override={overrides.locofyFrame}
            hasGap={true}
            className={classNames(projectcss.all, sty.locofyFrame)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"topBar"}
              data-plasmic-override={overrides.topBar}
              hasGap={true}
              className={classNames(projectcss.all, sty.topBar)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aNma8
                )}
              >
                {"Plasmic"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"menu"}
                data-plasmic-override={overrides.menu}
                hasGap={true}
                className={classNames(projectcss.all, sty.menu)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"menuButtons"}
                  data-plasmic-override={overrides.menuButtons}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.menuButtons)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"menu2"}
                    data-plasmic-override={overrides.menu2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.menu2)}
                  >
                    <div
                      data-plasmic-name={"menu1"}
                      data-plasmic-override={overrides.menu1}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.menu1
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }
                      }}
                    >
                      {"Menu"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"menu3"}
                    data-plasmic-override={overrides.menu3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.menu3)}
                  >
                    <div
                      data-plasmic-name={"menu4"}
                      data-plasmic-override={overrides.menu4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.menu4
                      )}
                    >
                      {"Menu"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"menu5"}
                    data-plasmic-override={overrides.menu5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.menu5)}
                  >
                    <div
                      data-plasmic-name={"menu6"}
                      data-plasmic-override={overrides.menu6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.menu6
                      )}
                    >
                      {"Menu"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"menu7"}
                    data-plasmic-override={overrides.menu7}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.menu7)}
                  >
                    <div
                      data-plasmic-name={"menu8"}
                      data-plasmic-override={overrides.menu8}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.menu8
                      )}
                    >
                      {"Menu"}
                    </div>
                  </Stack__>
                </Stack__>
                {false ? (
                  <Stack__
                    as={HamburgerIcon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.svg__rVga5)}
                    role={"img"}
                  />
                ) : null}
              </Stack__>
            </Stack__>
            <div
              data-plasmic-name={"rectangle1"}
              data-plasmic-override={overrides.rectangle1}
              className={classNames(projectcss.all, sty.rectangle1)}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"frame8"}
              data-plasmic-override={overrides.frame8}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame8)}
            >
              <div
                data-plasmic-name={"rectangle2"}
                data-plasmic-override={overrides.rectangle2}
                className={classNames(projectcss.all, sty.rectangle2)}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sw85M
                  )}
                >
                  {"Details and Texts"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"enterYourNameLayout"}
                  data-plasmic-override={overrides.enterYourNameLayout}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.enterYourNameLayout
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5BPz
                    )}
                  >
                    {"Email"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"passwordLayout"}
                  data-plasmic-override={overrides.passwordLayout}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.passwordLayout)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__coGq
                    )}
                  >
                    {"Password"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.button)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rpJtm
                    )}
                  >
                    {"Button"}
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame9"}
              data-plasmic-override={overrides.frame9}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame9)}
            >
              <Stack__
                as={PlasmicImg__}
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                hasGap={true}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"366px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "100%"
                    : "1652px"
                }
                loading={"lazy"}
                src={{
                  src: frame7PozZk2ApevC,
                  fullWidth: 1652,
                  fullHeight: 366,
                  aspectRatio: 4.513661
                }}
              />

              {false ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"verticalBanner"}
                  data-plasmic-override={overrides.verticalBanner}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.verticalBanner)}
                >
                  <Group1Icon
                    className={classNames(projectcss.all, sty.svg__zegAj)}
                    role={"img"}
                  />
                </Stack__>
              ) : null}
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "locofyFrame",
    "topBar",
    "menu",
    "menuButtons",
    "menu2",
    "menu1",
    "menu3",
    "menu4",
    "menu5",
    "menu6",
    "menu7",
    "menu8",
    "rectangle1",
    "frame8",
    "rectangle2",
    "frame6",
    "enterYourNameLayout",
    "passwordLayout",
    "button",
    "frame9",
    "img",
    "verticalBanner"
  ],

  locofyFrame: [
    "locofyFrame",
    "topBar",
    "menu",
    "menuButtons",
    "menu2",
    "menu1",
    "menu3",
    "menu4",
    "menu5",
    "menu6",
    "menu7",
    "menu8",
    "rectangle1",
    "frame8",
    "rectangle2",
    "frame6",
    "enterYourNameLayout",
    "passwordLayout",
    "button",
    "frame9",
    "img",
    "verticalBanner"
  ],

  topBar: [
    "topBar",
    "menu",
    "menuButtons",
    "menu2",
    "menu1",
    "menu3",
    "menu4",
    "menu5",
    "menu6",
    "menu7",
    "menu8"
  ],

  menu: [
    "menu",
    "menuButtons",
    "menu2",
    "menu1",
    "menu3",
    "menu4",
    "menu5",
    "menu6",
    "menu7",
    "menu8"
  ],

  menuButtons: [
    "menuButtons",
    "menu2",
    "menu1",
    "menu3",
    "menu4",
    "menu5",
    "menu6",
    "menu7",
    "menu8"
  ],

  menu2: ["menu2", "menu1"],
  menu1: ["menu1"],
  menu3: ["menu3", "menu4"],
  menu4: ["menu4"],
  menu5: ["menu5", "menu6"],
  menu6: ["menu6"],
  menu7: ["menu7", "menu8"],
  menu8: ["menu8"],
  rectangle1: ["rectangle1"],
  frame8: [
    "frame8",
    "rectangle2",
    "frame6",
    "enterYourNameLayout",
    "passwordLayout",
    "button"
  ],

  rectangle2: ["rectangle2"],
  frame6: ["frame6", "enterYourNameLayout", "passwordLayout", "button"],
  enterYourNameLayout: ["enterYourNameLayout"],
  passwordLayout: ["passwordLayout"],
  button: ["button"],
  frame9: ["frame9", "img", "verticalBanner"],
  img: ["img"],
  verticalBanner: ["verticalBanner"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    locofyFrame: makeNodeComponent("locofyFrame"),
    topBar: makeNodeComponent("topBar"),
    menu: makeNodeComponent("menu"),
    menuButtons: makeNodeComponent("menuButtons"),
    menu2: makeNodeComponent("menu2"),
    menu1: makeNodeComponent("menu1"),
    menu3: makeNodeComponent("menu3"),
    menu4: makeNodeComponent("menu4"),
    menu5: makeNodeComponent("menu5"),
    menu6: makeNodeComponent("menu6"),
    menu7: makeNodeComponent("menu7"),
    menu8: makeNodeComponent("menu8"),
    rectangle1: makeNodeComponent("rectangle1"),
    frame8: makeNodeComponent("frame8"),
    rectangle2: makeNodeComponent("rectangle2"),
    frame6: makeNodeComponent("frame6"),
    enterYourNameLayout: makeNodeComponent("enterYourNameLayout"),
    passwordLayout: makeNodeComponent("passwordLayout"),
    button: makeNodeComponent("button"),
    frame9: makeNodeComponent("frame9"),
    img: makeNodeComponent("img"),
    verticalBanner: makeNodeComponent("verticalBanner"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
